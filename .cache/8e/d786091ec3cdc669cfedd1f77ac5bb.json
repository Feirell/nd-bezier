{"id":"node_modules/performance-test-runner/lib/tree-walker.js","dependencies":[{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\package.json","includedInParent":true,"mtime":1615640902725},{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\package.json","includedInParent":true,"mtime":1603290229801}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.mapDepthFirst = exports.depthFirstAsync = exports.depthFirst = void 0;\r\nconst isRecursive = (o) => 'containing' in o;\r\nfunction depthFirst(tree, callback) {\r\n    if (!Array.isArray(tree))\r\n        tree = [tree];\r\n    let number = 0;\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n    const recWalker = (node, parent, position) => {\r\n        callback(node, parent, number++, position.length, position, skipContainer);\r\n        if (shouldSkip) {\r\n            shouldSkip = false;\r\n            return;\r\n        }\r\n        if (!isRecursive(node))\r\n            return;\r\n        const nodeCon = node.containing;\r\n        for (let i = 0; i < nodeCon.length; i++)\r\n            recWalker(nodeCon[i], node, [...position, i]);\r\n    };\r\n    for (let i = 0; i < tree.length; i++)\r\n        recWalker(tree[i], undefined, [i]);\r\n}\r\nexports.depthFirst = depthFirst;\r\nasync function depthFirstAsync(tree, callback) {\r\n    if (!Array.isArray(tree))\r\n        tree = [tree];\r\n    let number = 0;\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n    const recWalker = async (node, parent, position) => {\r\n        await callback(node, parent, number++, position.length, position, skipContainer);\r\n        if (shouldSkip) {\r\n            shouldSkip = false;\r\n            return;\r\n        }\r\n        if (!isRecursive(node))\r\n            return;\r\n        const nodeCon = node.containing;\r\n        for (let i = 0; i < nodeCon.length; i++)\r\n            await recWalker(nodeCon[i], node, [...position, i]);\r\n    };\r\n    for (let i = 0; i < tree.length; i++)\r\n        await recWalker(tree[i], undefined, [i]);\r\n}\r\nexports.depthFirstAsync = depthFirstAsync;\r\nfunction mapDepthFirst(tree, callback) {\r\n    if (!Array.isArray(tree))\r\n        tree = [tree];\r\n    let number = 0;\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n    const recWalker = (node, parent, position) => {\r\n        let repl = callback(node, parent, number++, position.length, position, skipContainer);\r\n        if (node == repl)\r\n            repl = { ...repl };\r\n        if (!isRecursive(repl))\r\n            return repl;\r\n        if (shouldSkip) {\r\n            shouldSkip = false;\r\n            return repl;\r\n        }\r\n        if (isRecursive(node)) {\r\n            const nodeCon = node.containing;\r\n            const replCon = repl.containing = new Array(nodeCon.length);\r\n            for (let i = 0; i < nodeCon.length; i++)\r\n                replCon[i] = recWalker(nodeCon[i], node, [...position, i]);\r\n        }\r\n        else {\r\n            repl.containing = [];\r\n        }\r\n        return repl;\r\n    };\r\n    const ret = new Array(tree.length);\r\n    for (let i = 0; i < tree.length; i++)\r\n        ret[i] = recWalker(tree[i], undefined, [i]);\r\n    return ret;\r\n}\r\nexports.mapDepthFirst = mapDepthFirst;\r\n/*\r\nexport function depthFirst<T extends Recursive>(tree: T | T[], callback: depthFirstCB<T>) {\r\n    let indexes: number [] = [0];\r\n    let parent = [];\r\n    let stack: T[][] = [Array.isArray(tree) ? tree : [tree]];\r\n\r\n    let currentContaining = stack;\r\n\r\n    let number = 0;\r\n\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n\r\n    while (indexes.length > 0) {\r\n        const currentIndex = indexes[0];\r\n        const elem = currentContaining[0][currentIndex];\r\n\r\n        const depth = stack.length;\r\n\r\n        shouldSkip = false;\r\n        callback(elem, parent[0], number, depth, indexes.slice(0).reverse(), skipContainer);\r\n\r\n        number++;\r\n\r\n        const isContainerWithElements = 'containing' in elem && elem.containing.length > 0;\r\n        if (!shouldSkip && isContainerWithElements) {\r\n            // going in one more depth\r\n            parent.unshift(elem);\r\n            stack.unshift(elem.containing as T[]);\r\n            indexes.unshift(0);\r\n        } else {\r\n            // stepping one horizontal, next sibling\r\n            indexes[0]++;\r\n\r\n            while (stack.length > 0 && indexes[0] >= stack[0].length) {\r\n                // this was the last element on this depth\r\n                // move one layer upwards\r\n                parent.shift();\r\n                indexes.shift();\r\n                stack.shift();\r\n\r\n                // move away from the element which provided the last depth we stepped out of\r\n                if (indexes.length > 0)\r\n                    indexes[0]++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function mapDepthFirst<T extends Recursive, M extends Recursive>(\r\n    tree: T | T[],\r\n    callback: mapDepthFirstCB<T, M>\r\n): M[] {\r\n    const root = [];\r\n\r\n    depthFirst<T>(tree, (original: T, parent: T, number: number, depth: number, fullPoint: number[], skipContainer: () => void) => {\r\n        const origIsContainer = isContainer(original);\r\n        let replace = callback(original, parent, number, depth, fullPoint, skipContainer);\r\n        const replIsContainer = isContainer(replace);\r\n\r\n        // TODO create other way fully map\r\n        if (replace as Recursive == original as Recursive)\r\n            replace = {...replace};\r\n\r\n        if (replIsContainer)\r\n            replace.containing = []; // clearing the containing array\r\n\r\n        // if this container was replaced with a non container\r\n        if (origIsContainer && !replIsContainer)\r\n            skipContainer();\r\n\r\n        let containingArray = root;\r\n\r\n        for (let i = 0; i < fullPoint.length - 1; i++)\r\n            containingArray = containingArray[fullPoint[i]].containing;\r\n\r\n        containingArray[fullPoint[fullPoint.length - 1]] = replace;\r\n    });\r\n\r\n    return root;\r\n}\r\n\r\n */ \r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/performance-test-runner/lib/tree-walker.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}}],"sources":{"node_modules/performance-test-runner/lib/tree-walker.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.mapDepthFirst = exports.depthFirstAsync = exports.depthFirst = void 0;\r\nconst isRecursive = (o) => 'containing' in o;\r\nfunction depthFirst(tree, callback) {\r\n    if (!Array.isArray(tree))\r\n        tree = [tree];\r\n    let number = 0;\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n    const recWalker = (node, parent, position) => {\r\n        callback(node, parent, number++, position.length, position, skipContainer);\r\n        if (shouldSkip) {\r\n            shouldSkip = false;\r\n            return;\r\n        }\r\n        if (!isRecursive(node))\r\n            return;\r\n        const nodeCon = node.containing;\r\n        for (let i = 0; i < nodeCon.length; i++)\r\n            recWalker(nodeCon[i], node, [...position, i]);\r\n    };\r\n    for (let i = 0; i < tree.length; i++)\r\n        recWalker(tree[i], undefined, [i]);\r\n}\r\nexports.depthFirst = depthFirst;\r\nasync function depthFirstAsync(tree, callback) {\r\n    if (!Array.isArray(tree))\r\n        tree = [tree];\r\n    let number = 0;\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n    const recWalker = async (node, parent, position) => {\r\n        await callback(node, parent, number++, position.length, position, skipContainer);\r\n        if (shouldSkip) {\r\n            shouldSkip = false;\r\n            return;\r\n        }\r\n        if (!isRecursive(node))\r\n            return;\r\n        const nodeCon = node.containing;\r\n        for (let i = 0; i < nodeCon.length; i++)\r\n            await recWalker(nodeCon[i], node, [...position, i]);\r\n    };\r\n    for (let i = 0; i < tree.length; i++)\r\n        await recWalker(tree[i], undefined, [i]);\r\n}\r\nexports.depthFirstAsync = depthFirstAsync;\r\nfunction mapDepthFirst(tree, callback) {\r\n    if (!Array.isArray(tree))\r\n        tree = [tree];\r\n    let number = 0;\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n    const recWalker = (node, parent, position) => {\r\n        let repl = callback(node, parent, number++, position.length, position, skipContainer);\r\n        if (node == repl)\r\n            repl = { ...repl };\r\n        if (!isRecursive(repl))\r\n            return repl;\r\n        if (shouldSkip) {\r\n            shouldSkip = false;\r\n            return repl;\r\n        }\r\n        if (isRecursive(node)) {\r\n            const nodeCon = node.containing;\r\n            const replCon = repl.containing = new Array(nodeCon.length);\r\n            for (let i = 0; i < nodeCon.length; i++)\r\n                replCon[i] = recWalker(nodeCon[i], node, [...position, i]);\r\n        }\r\n        else {\r\n            repl.containing = [];\r\n        }\r\n        return repl;\r\n    };\r\n    const ret = new Array(tree.length);\r\n    for (let i = 0; i < tree.length; i++)\r\n        ret[i] = recWalker(tree[i], undefined, [i]);\r\n    return ret;\r\n}\r\nexports.mapDepthFirst = mapDepthFirst;\r\n/*\r\nexport function depthFirst<T extends Recursive>(tree: T | T[], callback: depthFirstCB<T>) {\r\n    let indexes: number [] = [0];\r\n    let parent = [];\r\n    let stack: T[][] = [Array.isArray(tree) ? tree : [tree]];\r\n\r\n    let currentContaining = stack;\r\n\r\n    let number = 0;\r\n\r\n    let shouldSkip = false;\r\n    const skipContainer = () => shouldSkip = true;\r\n\r\n    while (indexes.length > 0) {\r\n        const currentIndex = indexes[0];\r\n        const elem = currentContaining[0][currentIndex];\r\n\r\n        const depth = stack.length;\r\n\r\n        shouldSkip = false;\r\n        callback(elem, parent[0], number, depth, indexes.slice(0).reverse(), skipContainer);\r\n\r\n        number++;\r\n\r\n        const isContainerWithElements = 'containing' in elem && elem.containing.length > 0;\r\n        if (!shouldSkip && isContainerWithElements) {\r\n            // going in one more depth\r\n            parent.unshift(elem);\r\n            stack.unshift(elem.containing as T[]);\r\n            indexes.unshift(0);\r\n        } else {\r\n            // stepping one horizontal, next sibling\r\n            indexes[0]++;\r\n\r\n            while (stack.length > 0 && indexes[0] >= stack[0].length) {\r\n                // this was the last element on this depth\r\n                // move one layer upwards\r\n                parent.shift();\r\n                indexes.shift();\r\n                stack.shift();\r\n\r\n                // move away from the element which provided the last depth we stepped out of\r\n                if (indexes.length > 0)\r\n                    indexes[0]++;\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nexport function mapDepthFirst<T extends Recursive, M extends Recursive>(\r\n    tree: T | T[],\r\n    callback: mapDepthFirstCB<T, M>\r\n): M[] {\r\n    const root = [];\r\n\r\n    depthFirst<T>(tree, (original: T, parent: T, number: number, depth: number, fullPoint: number[], skipContainer: () => void) => {\r\n        const origIsContainer = isContainer(original);\r\n        let replace = callback(original, parent, number, depth, fullPoint, skipContainer);\r\n        const replIsContainer = isContainer(replace);\r\n\r\n        // TODO create other way fully map\r\n        if (replace as Recursive == original as Recursive)\r\n            replace = {...replace};\r\n\r\n        if (replIsContainer)\r\n            replace.containing = []; // clearing the containing array\r\n\r\n        // if this container was replaced with a non container\r\n        if (origIsContainer && !replIsContainer)\r\n            skipContainer();\r\n\r\n        let containingArray = root;\r\n\r\n        for (let i = 0; i < fullPoint.length - 1; i++)\r\n            containingArray = containingArray[fullPoint[i]].containing;\r\n\r\n        containingArray[fullPoint[fullPoint.length - 1]] = replace;\r\n    });\r\n\r\n    return root;\r\n}\r\n\r\n */ \r\n"},"lineCount":165}},"error":null,"hash":"fe3c1151f1b7387712d8c1fe5fdda18a","cacheData":{"env":{}}}