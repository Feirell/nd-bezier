{"id":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","dependencies":[{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\package.json","includedInParent":true,"mtime":1615640902725},{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\linear-quadratic-cubic-eq-solver\\package.json","includedInParent":true,"mtime":1598976730916}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Complex {\r\n    constructor(re, im) {\r\n        this.re = re || 0;\r\n        this.im = im || 0;\r\n    }\r\n}\r\n/**\r\n * Multiplies the complex numbers a and b.\r\n */\r\nComplex.multiply = function multiply(a, b) {\r\n    return new Complex(a.re * b.re - a.im * b.im, a.re * b.im + b.re * a.im);\r\n};\r\n/**\r\n * Adds Complex a to Complex b\r\n */\r\nComplex.add = function add(a, b) {\r\n    return new Complex(a.re + b.re, a.im + b.im);\r\n};\r\n/**\r\n * Divide a complex number by an real number\r\n *\r\n * n / c\r\n *\r\n * divideNCompl(3, new Complex(2, -5)) == 3 / (2 - 5i)\r\n */\r\nComplex.divideNCompl = function divideNCompl(n, c) {\r\n    const nDivByk = n / (c.re * c.re + c.im * c.im);\r\n    return new Complex(c.re * nDivByk, -c.im * nDivByk);\r\n};\r\n/**\r\n * Calculates the complex nth-roots of the given complex number.\r\n */\r\nComplex.root = function root(c, n) {\r\n    const a = c.re;\r\n    const b = c.im;\r\n    // length of the complex number \r\n    const r = Math.sqrt(a * a + b * b);\r\n    const phi = Math.acos(a / r);\r\n    const roots = new Array(n);\r\n    const nthRootOfR1 = Math.pow(r, 1 / n);\r\n    const nthRootOfR2 = (b < 0 ? -nthRootOfR1 : nthRootOfR1);\r\n    for (let k = 0; k < n; k++) {\r\n        const d = (k * 2 * Math.PI + phi) / n;\r\n        roots[k] = new Complex(nthRootOfR1 * Math.cos(d), nthRootOfR2 * Math.sin(d));\r\n    }\r\n    return roots;\r\n};\r\n/**\r\n * Is a simplified variant of the root(), which is somewhat faster and only returns the first root.\r\n */\r\nComplex.cubicRoot = function cubicRoot(c) {\r\n    const a = c.re;\r\n    const b = c.im;\r\n    // length of the complex number \r\n    const r = Math.sqrt(a * a + b * b);\r\n    const nthRootOfR1 = Math.pow(r, 1 / 3);\r\n    const nthRootOfR2 = (b < 0 ? -nthRootOfR1 : nthRootOfR1);\r\n    const d = Math.acos(a / r) / 3;\r\n    return new Complex(nthRootOfR1 * Math.cos(d), nthRootOfR2 * Math.sin(d));\r\n};\r\nexports.default = Complex;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}}],"sources":{"node_modules/linear-quadratic-cubic-eq-solver/cjs/complex.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nclass Complex {\r\n    constructor(re, im) {\r\n        this.re = re || 0;\r\n        this.im = im || 0;\r\n    }\r\n}\r\n/**\r\n * Multiplies the complex numbers a and b.\r\n */\r\nComplex.multiply = function multiply(a, b) {\r\n    return new Complex(a.re * b.re - a.im * b.im, a.re * b.im + b.re * a.im);\r\n};\r\n/**\r\n * Adds Complex a to Complex b\r\n */\r\nComplex.add = function add(a, b) {\r\n    return new Complex(a.re + b.re, a.im + b.im);\r\n};\r\n/**\r\n * Divide a complex number by an real number\r\n *\r\n * n / c\r\n *\r\n * divideNCompl(3, new Complex(2, -5)) == 3 / (2 - 5i)\r\n */\r\nComplex.divideNCompl = function divideNCompl(n, c) {\r\n    const nDivByk = n / (c.re * c.re + c.im * c.im);\r\n    return new Complex(c.re * nDivByk, -c.im * nDivByk);\r\n};\r\n/**\r\n * Calculates the complex nth-roots of the given complex number.\r\n */\r\nComplex.root = function root(c, n) {\r\n    const a = c.re;\r\n    const b = c.im;\r\n    // length of the complex number \r\n    const r = Math.sqrt(a * a + b * b);\r\n    const phi = Math.acos(a / r);\r\n    const roots = new Array(n);\r\n    const nthRootOfR1 = Math.pow(r, 1 / n);\r\n    const nthRootOfR2 = (b < 0 ? -nthRootOfR1 : nthRootOfR1);\r\n    for (let k = 0; k < n; k++) {\r\n        const d = (k * 2 * Math.PI + phi) / n;\r\n        roots[k] = new Complex(nthRootOfR1 * Math.cos(d), nthRootOfR2 * Math.sin(d));\r\n    }\r\n    return roots;\r\n};\r\n/**\r\n * Is a simplified variant of the root(), which is somewhat faster and only returns the first root.\r\n */\r\nComplex.cubicRoot = function cubicRoot(c) {\r\n    const a = c.re;\r\n    const b = c.im;\r\n    // length of the complex number \r\n    const r = Math.sqrt(a * a + b * b);\r\n    const nthRootOfR1 = Math.pow(r, 1 / 3);\r\n    const nthRootOfR2 = (b < 0 ? -nthRootOfR1 : nthRootOfR1);\r\n    const d = Math.acos(a / r) / 3;\r\n    return new Complex(nthRootOfR1 * Math.cos(d), nthRootOfR2 * Math.sin(d));\r\n};\r\nexports.default = Complex;\r\n"},"lineCount":64}},"error":null,"hash":"cf4621ac471e22c2ed5c4d7a839046bd","cacheData":{"env":{}}}