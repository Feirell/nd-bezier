{"id":"node_modules/performance-test-runner/lib/throttle.js","dependencies":[{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\package.json","includedInParent":true,"mtime":1615640902725},{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\package.json","includedInParent":true,"mtime":1603290229801}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createThrottle = void 0;\r\nfunction createThrottle(action, desiredTimout) {\r\n    let promiseRes = [];\r\n    let promiseRej = [];\r\n    let timeoutId = undefined;\r\n    let appointedNextCallTS = undefined;\r\n    let actionNeeded = false;\r\n    let lastCallArgs = undefined;\r\n    const doAction = () => {\r\n        try {\r\n            action.apply(undefined, lastCallArgs);\r\n        }\r\n        catch (err) {\r\n            for (const rej of promiseRej)\r\n                try {\r\n                    rej(err);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            promiseRej = [];\r\n        }\r\n        for (const res of promiseRes)\r\n            try {\r\n                res();\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        promiseRes = [];\r\n    };\r\n    const createTimeout = () => {\r\n        const currentTS = Date.now();\r\n        let calibratedTimeout = desiredTimout;\r\n        if (appointedNextCallTS) {\r\n            // if we skipped multiple slots, we need to jump those otherwise we get some with timeout negative\r\n            // which results in a burst after the interval could not keep up\r\n            if (appointedNextCallTS < currentTS) {\r\n                appointedNextCallTS += Math.ceil((currentTS - appointedNextCallTS) / desiredTimout) * desiredTimout;\r\n            }\r\n            calibratedTimeout = appointedNextCallTS - currentTS;\r\n            appointedNextCallTS += desiredTimout;\r\n        }\r\n        else {\r\n            appointedNextCallTS = currentTS + desiredTimout;\r\n        }\r\n        timeoutId = setTimeout(() => {\r\n            timeoutId = undefined;\r\n            if (!actionNeeded) {\r\n                appointedNextCallTS = undefined;\r\n                return;\r\n            }\r\n            actionNeeded = false;\r\n            doAction();\r\n            createTimeout();\r\n        }, calibratedTimeout);\r\n    };\r\n    return (doImmediately = false, ...param) => new Promise((res, rej) => {\r\n        lastCallArgs = param;\r\n        promiseRes.push(res);\r\n        promiseRej.push(rej);\r\n        if (doImmediately) {\r\n            if (timeoutId)\r\n                clearTimeout(timeoutId);\r\n            doAction();\r\n        }\r\n        else {\r\n            if (!timeoutId) {\r\n                actionNeeded = false;\r\n                doAction();\r\n                createTimeout();\r\n            }\r\n            else\r\n                actionNeeded = true;\r\n        }\r\n    });\r\n}\r\nexports.createThrottle = createThrottle;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/performance-test-runner/lib/throttle.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}}],"sources":{"node_modules/performance-test-runner/lib/throttle.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.createThrottle = void 0;\r\nfunction createThrottle(action, desiredTimout) {\r\n    let promiseRes = [];\r\n    let promiseRej = [];\r\n    let timeoutId = undefined;\r\n    let appointedNextCallTS = undefined;\r\n    let actionNeeded = false;\r\n    let lastCallArgs = undefined;\r\n    const doAction = () => {\r\n        try {\r\n            action.apply(undefined, lastCallArgs);\r\n        }\r\n        catch (err) {\r\n            for (const rej of promiseRej)\r\n                try {\r\n                    rej(err);\r\n                }\r\n                catch (e) {\r\n                    console.error(e);\r\n                }\r\n            promiseRej = [];\r\n        }\r\n        for (const res of promiseRes)\r\n            try {\r\n                res();\r\n            }\r\n            catch (e) {\r\n                console.error(e);\r\n            }\r\n        promiseRes = [];\r\n    };\r\n    const createTimeout = () => {\r\n        const currentTS = Date.now();\r\n        let calibratedTimeout = desiredTimout;\r\n        if (appointedNextCallTS) {\r\n            // if we skipped multiple slots, we need to jump those otherwise we get some with timeout negative\r\n            // which results in a burst after the interval could not keep up\r\n            if (appointedNextCallTS < currentTS) {\r\n                appointedNextCallTS += Math.ceil((currentTS - appointedNextCallTS) / desiredTimout) * desiredTimout;\r\n            }\r\n            calibratedTimeout = appointedNextCallTS - currentTS;\r\n            appointedNextCallTS += desiredTimout;\r\n        }\r\n        else {\r\n            appointedNextCallTS = currentTS + desiredTimout;\r\n        }\r\n        timeoutId = setTimeout(() => {\r\n            timeoutId = undefined;\r\n            if (!actionNeeded) {\r\n                appointedNextCallTS = undefined;\r\n                return;\r\n            }\r\n            actionNeeded = false;\r\n            doAction();\r\n            createTimeout();\r\n        }, calibratedTimeout);\r\n    };\r\n    return (doImmediately = false, ...param) => new Promise((res, rej) => {\r\n        lastCallArgs = param;\r\n        promiseRes.push(res);\r\n        promiseRej.push(rej);\r\n        if (doImmediately) {\r\n            if (timeoutId)\r\n                clearTimeout(timeoutId);\r\n            doAction();\r\n        }\r\n        else {\r\n            if (!timeoutId) {\r\n                actionNeeded = false;\r\n                doAction();\r\n                createTimeout();\r\n            }\r\n            else\r\n                actionNeeded = true;\r\n        }\r\n    });\r\n}\r\nexports.createThrottle = createThrottle;\r\n"},"lineCount":81}},"error":null,"hash":"3170e93d73216df306092a20208a607e","cacheData":{"env":{}}}