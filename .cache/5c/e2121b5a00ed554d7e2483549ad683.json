{"id":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","dependencies":[{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\package.json","includedInParent":true,"mtime":1615640902725},{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\linear-quadratic-cubic-eq-solver\\package.json","includedInParent":true,"mtime":1598976730916},{"name":"./complex.js","loc":{"line":3,"column":29},"parent":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\linear-quadratic-cubic-eq-solver\\cjs\\index.js","resolved":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\linear-quadratic-cubic-eq-solver\\cjs\\complex.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst complex_js_1 = require(\"./complex.js\");\r\n/**\r\n * Solves 0 = a*x + b for x\r\n */\r\nfunction solveLinearEquation(a, b) {\r\n    if (a == 0)\r\n        if (b != 0)\r\n            return [];\r\n        else\r\n            return [0];\r\n    else\r\n        return [-b / a];\r\n}\r\nexports.solveLinearEquation = solveLinearEquation;\r\n/**\r\n * Solves 0 = a*x^2 + b*x + c for x\r\n */\r\nfunction solveQuadraticEquation(a, b, c) {\r\n    if (a == 0)\r\n        return solveLinearEquation(b, c);\r\n    const p = b / a;\r\n    const q = c / a;\r\n    const sqrtContent = p / 2 * p / 2 - q;\r\n    if (sqrtContent < 0) {\r\n        const sqrtR = Math.sqrt(-sqrtContent);\r\n        return [new complex_js_1.default(-p / 2, sqrtR), new complex_js_1.default(-p / 2, -sqrtR)];\r\n    }\r\n    else {\r\n        const sqrtR = Math.sqrt(sqrtContent);\r\n        return [-p / 2 + sqrtR, -p / 2 - sqrtR];\r\n    }\r\n}\r\nexports.solveQuadraticEquation = solveQuadraticEquation;\r\nconst c1Multi = new complex_js_1.default(-0.5, 0.5 * Math.sqrt(3));\r\nconst c2Multi = new complex_js_1.default(-0.5, -0.5 * Math.sqrt(3));\r\nfunction calcC(d0, d1) {\r\n    const sqrtContent = d1 * d1 - 4 * d0 * d0 * d0;\r\n    if (sqrtContent < 0) {\r\n        const imaginaryPart = Math.sqrt(-sqrtContent) / 2;\r\n        const realPart = d1 / 2;\r\n        // you could also use Complex.root to get all roots, to prevent the usage of \r\n        // multiplications for c1 and c2 in solveCubicEquation\r\n        // const [c0,c1,c2] = Complex.root(new Complex(realPart, imaginaryPart), 3);\r\n        return complex_js_1.default.cubicRoot(new complex_js_1.default(realPart, imaginaryPart));\r\n    }\r\n    else {\r\n        return new complex_js_1.default(Math.cbrt((d1 + Math.sqrt(sqrtContent)) / 2), 0);\r\n    }\r\n}\r\nfunction calcX(d0, c, a, b) {\r\n    // -1 / (3 * a) * (b + c + d / c)\r\n    const dDivc = complex_js_1.default.divideNCompl(d0, c);\r\n    const res = new complex_js_1.default(-(dDivc.re + c.re + b) / (3 * a), -(dDivc.im + c.im) / (3 * a));\r\n    return res;\r\n}\r\n/**\r\n * Solves 0 = a*x^3 + b*x^2 + c*x + d for x\r\n */\r\nfunction solveCubicEquation(a, b, c, d) {\r\n    if (a == 0)\r\n        return solveQuadraticEquation(b, c, d);\r\n    if (d == 0) {\r\n        const x = solveQuadraticEquation(a, b, c);\r\n        const y = [0];\r\n        const l = x.length;\r\n        if (l > 0) {\r\n            y[1] = x[0];\r\n            if (l > 1) {\r\n                y[2] = x[1];\r\n            }\r\n        }\r\n        return y;\r\n    }\r\n    const delta0 = b * b -\r\n        3 * a * c;\r\n    const delta1 = 2 * b * b * b -\r\n        9 * a * b * c +\r\n        27 * a * a * d;\r\n    // const delta = 18 * a * b * c * d -\r\n    //     4 * b * b * b * d +\r\n    //     b * b * c * c -\r\n    //     4 * a * c * c * c -\r\n    //     27 * a * a * d * d;\r\n    const c0 = calcC(delta0, delta1);\r\n    const c1 = complex_js_1.default.multiply(c0, c1Multi);\r\n    const c2 = complex_js_1.default.multiply(c0, c2Multi);\r\n    const x0 = calcX(delta0, c0, a, b);\r\n    const x1 = calcX(delta0, c1, a, b);\r\n    const x2 = calcX(delta0, c2, a, b);\r\n    return [x0, x1, x2];\r\n}\r\nexports.solveCubicEquation = solveCubicEquation;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}}],"sources":{"node_modules/linear-quadratic-cubic-eq-solver/cjs/index.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nconst complex_js_1 = require(\"./complex.js\");\r\n/**\r\n * Solves 0 = a*x + b for x\r\n */\r\nfunction solveLinearEquation(a, b) {\r\n    if (a == 0)\r\n        if (b != 0)\r\n            return [];\r\n        else\r\n            return [0];\r\n    else\r\n        return [-b / a];\r\n}\r\nexports.solveLinearEquation = solveLinearEquation;\r\n/**\r\n * Solves 0 = a*x^2 + b*x + c for x\r\n */\r\nfunction solveQuadraticEquation(a, b, c) {\r\n    if (a == 0)\r\n        return solveLinearEquation(b, c);\r\n    const p = b / a;\r\n    const q = c / a;\r\n    const sqrtContent = p / 2 * p / 2 - q;\r\n    if (sqrtContent < 0) {\r\n        const sqrtR = Math.sqrt(-sqrtContent);\r\n        return [new complex_js_1.default(-p / 2, sqrtR), new complex_js_1.default(-p / 2, -sqrtR)];\r\n    }\r\n    else {\r\n        const sqrtR = Math.sqrt(sqrtContent);\r\n        return [-p / 2 + sqrtR, -p / 2 - sqrtR];\r\n    }\r\n}\r\nexports.solveQuadraticEquation = solveQuadraticEquation;\r\nconst c1Multi = new complex_js_1.default(-0.5, 0.5 * Math.sqrt(3));\r\nconst c2Multi = new complex_js_1.default(-0.5, -0.5 * Math.sqrt(3));\r\nfunction calcC(d0, d1) {\r\n    const sqrtContent = d1 * d1 - 4 * d0 * d0 * d0;\r\n    if (sqrtContent < 0) {\r\n        const imaginaryPart = Math.sqrt(-sqrtContent) / 2;\r\n        const realPart = d1 / 2;\r\n        // you could also use Complex.root to get all roots, to prevent the usage of \r\n        // multiplications for c1 and c2 in solveCubicEquation\r\n        // const [c0,c1,c2] = Complex.root(new Complex(realPart, imaginaryPart), 3);\r\n        return complex_js_1.default.cubicRoot(new complex_js_1.default(realPart, imaginaryPart));\r\n    }\r\n    else {\r\n        return new complex_js_1.default(Math.cbrt((d1 + Math.sqrt(sqrtContent)) / 2), 0);\r\n    }\r\n}\r\nfunction calcX(d0, c, a, b) {\r\n    // -1 / (3 * a) * (b + c + d / c)\r\n    const dDivc = complex_js_1.default.divideNCompl(d0, c);\r\n    const res = new complex_js_1.default(-(dDivc.re + c.re + b) / (3 * a), -(dDivc.im + c.im) / (3 * a));\r\n    return res;\r\n}\r\n/**\r\n * Solves 0 = a*x^3 + b*x^2 + c*x + d for x\r\n */\r\nfunction solveCubicEquation(a, b, c, d) {\r\n    if (a == 0)\r\n        return solveQuadraticEquation(b, c, d);\r\n    if (d == 0) {\r\n        const x = solveQuadraticEquation(a, b, c);\r\n        const y = [0];\r\n        const l = x.length;\r\n        if (l > 0) {\r\n            y[1] = x[0];\r\n            if (l > 1) {\r\n                y[2] = x[1];\r\n            }\r\n        }\r\n        return y;\r\n    }\r\n    const delta0 = b * b -\r\n        3 * a * c;\r\n    const delta1 = 2 * b * b * b -\r\n        9 * a * b * c +\r\n        27 * a * a * d;\r\n    // const delta = 18 * a * b * c * d -\r\n    //     4 * b * b * b * d +\r\n    //     b * b * c * c -\r\n    //     4 * a * c * c * c -\r\n    //     27 * a * a * d * d;\r\n    const c0 = calcC(delta0, delta1);\r\n    const c1 = complex_js_1.default.multiply(c0, c1Multi);\r\n    const c2 = complex_js_1.default.multiply(c0, c2Multi);\r\n    const x0 = calcX(delta0, c0, a, b);\r\n    const x1 = calcX(delta0, c1, a, b);\r\n    const x2 = calcX(delta0, c2, a, b);\r\n    return [x0, x1, x2];\r\n}\r\nexports.solveCubicEquation = solveCubicEquation;\r\n"},"lineCount":95}},"error":null,"hash":"f90953bff85d2602c2de2e8d54a296a6","cacheData":{"env":{}}}