{"id":"node_modules/performance-test-runner/lib/function-body-helper.js","dependencies":[{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\package.json","includedInParent":true,"mtime":1615640902725},{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\package.json","includedInParent":true,"mtime":1603290229801}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.extractFunctionBodyString = exports.findEnclosing = void 0;\r\n/**\r\n * This function find the enclosing brackets in a string. For example if you use beginChar == '(' and endChar == ')'\r\n * and you would supply the string \"test (another (other))\" this function would return the index of the first ( and the\r\n * and the corresponding ) (not the last but the one which closes this bracket).\r\n *\r\n * @param str the string to search in\r\n * @param beginChar the start for an enclosing\r\n * @param endChar the end for the enclosing\r\n * @param startInString the character offset to use (default to zero)\r\n */\r\nfunction findEnclosing(str, beginChar, endChar, startInString = 0) {\r\n    let start = undefined;\r\n    let charIndex = startInString;\r\n    let depth = 0;\r\n    let inStr = false;\r\n    let escape = false;\r\n    for (let c of str.slice(startInString)) {\r\n        if (c == '\\'' ||\r\n            c == '\\\"' ||\r\n            c == '\\`') {\r\n            if (!escape)\r\n                inStr = !inStr;\r\n        }\r\n        else if (!inStr) {\r\n            if (c == beginChar) {\r\n                if (depth == 0)\r\n                    start = charIndex;\r\n                depth++;\r\n            }\r\n            else if (c == endChar) {\r\n                if (--depth == 0)\r\n                    return [start, charIndex];\r\n            }\r\n        }\r\n        escape = c == '\\\\' && !escape;\r\n        charIndex++;\r\n    }\r\n    return [undefined, undefined];\r\n}\r\nexports.findEnclosing = findEnclosing;\r\nfunction extractFunctionBodyString(fnc) {\r\n    const fncStr = '' + fnc;\r\n    const [startPara, endPara] = findEnclosing(fncStr, '(', ')');\r\n    const [startBlock, endBlock] = findEnclosing(fncStr, '{', '}', endPara);\r\n    return fncStr.slice(startBlock + 1, endBlock).trim();\r\n}\r\nexports.extractFunctionBodyString = extractFunctionBodyString;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/performance-test-runner/lib/function-body-helper.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}}],"sources":{"node_modules/performance-test-runner/lib/function-body-helper.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.extractFunctionBodyString = exports.findEnclosing = void 0;\r\n/**\r\n * This function find the enclosing brackets in a string. For example if you use beginChar == '(' and endChar == ')'\r\n * and you would supply the string \"test (another (other))\" this function would return the index of the first ( and the\r\n * and the corresponding ) (not the last but the one which closes this bracket).\r\n *\r\n * @param str the string to search in\r\n * @param beginChar the start for an enclosing\r\n * @param endChar the end for the enclosing\r\n * @param startInString the character offset to use (default to zero)\r\n */\r\nfunction findEnclosing(str, beginChar, endChar, startInString = 0) {\r\n    let start = undefined;\r\n    let charIndex = startInString;\r\n    let depth = 0;\r\n    let inStr = false;\r\n    let escape = false;\r\n    for (let c of str.slice(startInString)) {\r\n        if (c == '\\'' ||\r\n            c == '\\\"' ||\r\n            c == '\\`') {\r\n            if (!escape)\r\n                inStr = !inStr;\r\n        }\r\n        else if (!inStr) {\r\n            if (c == beginChar) {\r\n                if (depth == 0)\r\n                    start = charIndex;\r\n                depth++;\r\n            }\r\n            else if (c == endChar) {\r\n                if (--depth == 0)\r\n                    return [start, charIndex];\r\n            }\r\n        }\r\n        escape = c == '\\\\' && !escape;\r\n        charIndex++;\r\n    }\r\n    return [undefined, undefined];\r\n}\r\nexports.findEnclosing = findEnclosing;\r\nfunction extractFunctionBodyString(fnc) {\r\n    const fncStr = '' + fnc;\r\n    const [startPara, endPara] = findEnclosing(fncStr, '(', ')');\r\n    const [startBlock, endBlock] = findEnclosing(fncStr, '{', '}', endPara);\r\n    return fncStr.slice(startBlock + 1, endBlock).trim();\r\n}\r\nexports.extractFunctionBodyString = extractFunctionBodyString;\r\n"},"lineCount":51}},"error":null,"hash":"faf388e0dfb9ccbab04941dae94f8c51","cacheData":{"env":{}}}