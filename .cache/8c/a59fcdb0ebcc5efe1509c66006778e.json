{"id":"node_modules/performance-test-runner/lib/stringify-result-table.js","dependencies":[{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\package.json","includedInParent":true,"mtime":1615640902725},{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\package.json","includedInParent":true,"mtime":1603290229801},{"name":"./tree-walker","loc":{"line":4,"column":30},"parent":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\stringify-result-table.js","resolved":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\tree-walker.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatResultTable = void 0;\r\nconst tree_walker_1 = require(\"./tree-walker\");\r\nconst fmrNoFrac = Intl.NumberFormat('en-US', {\r\n    maximumFractionDigits: 0,\r\n    useGrouping: true\r\n}).format;\r\nconst fmrFrac = Intl.NumberFormat('en-US', {\r\n    maximumFractionDigits: 2,\r\n    minimumFractionDigits: 2,\r\n    useGrouping: true\r\n}).format;\r\nfunction formatResultTable(outputTree, nodata = '--', indent = '  ') {\r\n    // name, ops/sec, MoE, samples, relative\r\n    // index is the depth, the value is the number which is ready to compare\r\n    const readyToComp = [];\r\n    let rows = [['', 'ops/sec', 'MoE', 'samples', 'relative']];\r\n    const columnLeftAlignment = [true, false, false, false];\r\n    const minRowSize = [0, nodata.length, nodata.length, nodata.length, nodata.length];\r\n    for (let i = 0; i < 5; i++)\r\n        minRowSize[i] = Math.max(rows[0][i].length, minRowSize[i]);\r\n    tree_walker_1.depthFirst(outputTree, (e, p, number, depth) => {\r\n        if (e.type != 'group')\r\n            return;\r\n        rows.push(indent.repeat(depth - 1) + e.name);\r\n        let minHz;\r\n        const ind = indent.repeat(depth);\r\n        let testRows = [];\r\n        for (const test of e.containing) {\r\n            if (test.type != 'measurements')\r\n                continue;\r\n            const name = ind + test.name;\r\n            if (test.state == 'initialized') {\r\n                testRows.push([name, nodata, nodata, nodata, nodata]);\r\n                minRowSize[0] = Math.max(name.length, minRowSize[0]);\r\n            }\r\n            else {\r\n                // added hz in the last slot is technically wrong but much easier in mapping\r\n                const row = [name, fmrNoFrac(test.hz), fmrFrac(test.rme), fmrNoFrac(test.samples), test.hz];\r\n                for (let i = 0; i < 4; i++)\r\n                    minRowSize[i] = Math.max(row[i].length, minRowSize[i]);\r\n                testRows.push(row);\r\n                if (minHz == undefined || test.hz < minHz)\r\n                    minHz = test.hz;\r\n            }\r\n        }\r\n        for (const test of testRows) {\r\n            if (test[4] != nodata)\r\n                test[4] = fmrFrac(test[4] / minHz);\r\n            minRowSize[4] = Math.max(test[4].length, minRowSize[4]);\r\n        }\r\n        rows = rows.concat(testRows);\r\n    });\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const row = rows[i];\r\n        // row which do not contain a string[] but a string are header rows\r\n        if (typeof row == 'string')\r\n            continue;\r\n        let str = '';\r\n        for (let i = 0; i < 5; i++) {\r\n            if (i > 0)\r\n                str += ' ';\r\n            str += row[i][columnLeftAlignment[i] ? 'padEnd' : 'padStart'](minRowSize[i], ' ');\r\n        }\r\n        rows[i] = str;\r\n    }\r\n    return rows.join('\\n');\r\n}\r\nexports.formatResultTable = formatResultTable;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/performance-test-runner/lib/stringify-result-table.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}}],"sources":{"node_modules/performance-test-runner/lib/stringify-result-table.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.formatResultTable = void 0;\r\nconst tree_walker_1 = require(\"./tree-walker\");\r\nconst fmrNoFrac = Intl.NumberFormat('en-US', {\r\n    maximumFractionDigits: 0,\r\n    useGrouping: true\r\n}).format;\r\nconst fmrFrac = Intl.NumberFormat('en-US', {\r\n    maximumFractionDigits: 2,\r\n    minimumFractionDigits: 2,\r\n    useGrouping: true\r\n}).format;\r\nfunction formatResultTable(outputTree, nodata = '--', indent = '  ') {\r\n    // name, ops/sec, MoE, samples, relative\r\n    // index is the depth, the value is the number which is ready to compare\r\n    const readyToComp = [];\r\n    let rows = [['', 'ops/sec', 'MoE', 'samples', 'relative']];\r\n    const columnLeftAlignment = [true, false, false, false];\r\n    const minRowSize = [0, nodata.length, nodata.length, nodata.length, nodata.length];\r\n    for (let i = 0; i < 5; i++)\r\n        minRowSize[i] = Math.max(rows[0][i].length, minRowSize[i]);\r\n    tree_walker_1.depthFirst(outputTree, (e, p, number, depth) => {\r\n        if (e.type != 'group')\r\n            return;\r\n        rows.push(indent.repeat(depth - 1) + e.name);\r\n        let minHz;\r\n        const ind = indent.repeat(depth);\r\n        let testRows = [];\r\n        for (const test of e.containing) {\r\n            if (test.type != 'measurements')\r\n                continue;\r\n            const name = ind + test.name;\r\n            if (test.state == 'initialized') {\r\n                testRows.push([name, nodata, nodata, nodata, nodata]);\r\n                minRowSize[0] = Math.max(name.length, minRowSize[0]);\r\n            }\r\n            else {\r\n                // added hz in the last slot is technically wrong but much easier in mapping\r\n                const row = [name, fmrNoFrac(test.hz), fmrFrac(test.rme), fmrNoFrac(test.samples), test.hz];\r\n                for (let i = 0; i < 4; i++)\r\n                    minRowSize[i] = Math.max(row[i].length, minRowSize[i]);\r\n                testRows.push(row);\r\n                if (minHz == undefined || test.hz < minHz)\r\n                    minHz = test.hz;\r\n            }\r\n        }\r\n        for (const test of testRows) {\r\n            if (test[4] != nodata)\r\n                test[4] = fmrFrac(test[4] / minHz);\r\n            minRowSize[4] = Math.max(test[4].length, minRowSize[4]);\r\n        }\r\n        rows = rows.concat(testRows);\r\n    });\r\n    for (let i = 0; i < rows.length; i++) {\r\n        const row = rows[i];\r\n        // row which do not contain a string[] but a string are header rows\r\n        if (typeof row == 'string')\r\n            continue;\r\n        let str = '';\r\n        for (let i = 0; i < 5; i++) {\r\n            if (i > 0)\r\n                str += ' ';\r\n            str += row[i][columnLeftAlignment[i] ? 'padEnd' : 'padStart'](minRowSize[i], ' ');\r\n        }\r\n        rows[i] = str;\r\n    }\r\n    return rows.join('\\n');\r\n}\r\nexports.formatResultTable = formatResultTable;\r\n"},"lineCount":71}},"error":null,"hash":"a7a08cd6f94da672bab77fca86a53faa","cacheData":{"env":{}}}