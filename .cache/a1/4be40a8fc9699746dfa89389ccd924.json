{"id":"node_modules/performance-test-runner/lib/performance-test-runner.js","dependencies":[{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\package.json","includedInParent":true,"mtime":1615640902725},{"name":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\package.json","includedInParent":true,"mtime":1603290229801},{"name":"events","loc":{"line":4,"column":25},"parent":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\performance-test-runner.js","resolved":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\events\\events.js"},{"name":"Benchmark","loc":{"line":5,"column":26},"parent":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\performance-test-runner.js","resolved":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\Benchmark\\benchmark.js"},{"name":"./tree-walker","loc":{"line":6,"column":30},"parent":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\performance-test-runner.js","resolved":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\tree-walker.js"},{"name":"./function-body-helper","loc":{"line":7,"column":39},"parent":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\performance-test-runner.js","resolved":"C:\\Users\\Flo\\Projekte\\nd-bezier\\node_modules\\performance-test-runner\\lib\\function-body-helper.js"}],"generated":{"js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.speed = exports.measure = exports.defaultTestRunner = exports.PerformanceTestRunner = void 0;\r\nconst events_1 = require(\"events\");\r\nconst Benchmark = require(\"Benchmark\");\r\nconst tree_walker_1 = require(\"./tree-walker\");\r\nconst function_body_helper_1 = require(\"./function-body-helper\");\r\nconst noop = () => {\r\n};\r\nconst orderFunctions = (functions) => {\r\n    if (functions.length < 1)\r\n        throw new Error('at least the test function needs to be defined');\r\n    if (functions.length > 3)\r\n        throw new Error('too many functions given, can only use setup, test and teardown');\r\n    if (functions.length == 1)\r\n        return [noop, functions[0], noop];\r\n    else if (functions.length == 2)\r\n        return [functions[0], functions[1], noop];\r\n    return functions;\r\n};\r\nconst isValidIdentifier = (id) => {\r\n    if (/[ ;\\n]/.test(id))\r\n        return false;\r\n    try {\r\n        return Function('var ' + id + ' = 0; return ' + id + ';')() == 0;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nclass PerformanceTestRunner extends events_1.EventEmitter {\r\n    constructor() {\r\n        super();\r\n        this.suiteRunning = false;\r\n        this.callStack = [];\r\n        this.testTree = [];\r\n        // to ensure that the extracted functions keep their context\r\n        this.measure = this.measure.bind(this);\r\n        this.speed = this.speed.bind(this);\r\n    }\r\n    measure(title, fnc) {\r\n        const currentMeasure = {\r\n            type: \"measure\",\r\n            title, containing: []\r\n        };\r\n        if (this.callStack.length == 0)\r\n            this.testTree.push(currentMeasure);\r\n        else {\r\n            this.callStack[this.callStack.length - 1]\r\n                .containing.push(currentMeasure);\r\n        }\r\n        this.callStack.push(currentMeasure);\r\n        fnc();\r\n        this.callStack.pop();\r\n    }\r\n    speed(title, firstFncOrContext, ...functions) {\r\n        let ctx = {};\r\n        if (typeof firstFncOrContext == 'function')\r\n            functions.unshift(firstFncOrContext);\r\n        else\r\n            ctx = firstFncOrContext;\r\n        const [setup, test, teardown] = orderFunctions(functions);\r\n        const currentTest = {\r\n            type: \"speed\",\r\n            title, ctx, setup, test, teardown,\r\n            benchmark: undefined\r\n        };\r\n        this.callStack[this.callStack.length - 1]\r\n            .containing.push(currentTest);\r\n    }\r\n    extractTestResults() {\r\n        return tree_walker_1.mapDepthFirst(this.testTree, (elem) => {\r\n            if (elem.type == 'measure') {\r\n                return { type: 'group', name: elem.title, containing: [] };\r\n            }\r\n            else {\r\n                const bench = elem.benchmark;\r\n                const state = !bench || bench.stats.sample.length == 0 ? 'initialized' :\r\n                    bench.running ? 'running' :\r\n                        'finished';\r\n                if (state == 'initialized') {\r\n                    return {\r\n                        type: 'measurements',\r\n                        name: elem.title, state\r\n                    };\r\n                }\r\n                else {\r\n                    const stats = bench.stats;\r\n                    return {\r\n                        type: 'measurements',\r\n                        name: elem.title, state,\r\n                        hz: bench.hz,\r\n                        rme: stats.rme,\r\n                        samples: stats.sample.length\r\n                    };\r\n                }\r\n            }\r\n        }); // first level of the array will always only contain SPTRGroups\r\n    }\r\n    clearResults() {\r\n        if (this.suiteRunning)\r\n            return false;\r\n        tree_walker_1.depthFirst(this.testTree, (elem, parent) => {\r\n            if (elem.type == 'measure')\r\n                return;\r\n            elem.benchmark = undefined;\r\n        });\r\n        return true;\r\n    }\r\n    async runSuite({ clearPreviousResults = true } = {}) {\r\n        if (this.testTree.length == 0)\r\n            return false;\r\n        if (this.suiteRunning)\r\n            return false;\r\n        if (clearPreviousResults)\r\n            this.clearResults();\r\n        this.suiteRunning = true;\r\n        this.emitSuiteEvent('suite-started');\r\n        try {\r\n            await tree_walker_1.depthFirstAsync(this.testTree, async (elem, parent) => {\r\n                if (elem.type == 'measure')\r\n                    return;\r\n                const { ctx, setup, test: fn, teardown } = elem;\r\n                let bench;\r\n                const benchPromise = new Promise((res, rej) => {\r\n                    const ContextInjectedBench = Benchmark.runInContext(ctx);\r\n                    // derolling the context object from the \"global\" to allow users use attributes of the context without\r\n                    // prepending \"global.\"\r\n                    // Warning: this will not work with transpilers like tsc since they create new identifier in the process\r\n                    const contextUnrolled = Object.keys(ctx)\r\n                        // remove keys which are not valid identifier\r\n                        .filter(isValidIdentifier)\r\n                        .map(k => 'let ' + k + ' = global.' + k + ';').join('\\n') + '\\n';\r\n                    // extracting the body, since it is not clear when the benchmark package compiles the function and when not\r\n                    // this ensures that all tests run in the same manner and ensure that a given context can be used\r\n                    // by the test function\r\n                    const setupBody = function_body_helper_1.extractFunctionBodyString(setup);\r\n                    const fnBody = function_body_helper_1.extractFunctionBodyString(fn);\r\n                    const teardownBody = function_body_helper_1.extractFunctionBodyString(teardown);\r\n                    const onCycle = (ev) => this.emitBenchmarkEvent('benchmark-cycle', parent, elem, bench, ev);\r\n                    bench = new ContextInjectedBench({\r\n                        setup: contextUnrolled + setupBody,\r\n                        fn: fnBody,\r\n                        teardown: teardownBody,\r\n                        async: true,\r\n                        onError: rej,\r\n                        onComplete: res,\r\n                        onCycle\r\n                    });\r\n                });\r\n                elem.benchmark = bench;\r\n                bench.run();\r\n                this.emitBenchmarkEvent('benchmark-started', parent, elem, bench);\r\n                try {\r\n                    await benchPromise;\r\n                }\r\n                catch (err) {\r\n                    this.suiteRunning = false;\r\n                    this.emitBenchmarkEvent('benchmark-error', parent, elem, bench, err);\r\n                    throw err;\r\n                }\r\n                this.emitBenchmarkEvent('benchmark-finished', parent, elem, bench);\r\n            });\r\n        }\r\n        catch (err) {\r\n            this.suiteRunning = false;\r\n            this.emitSuiteEvent('suite-error', err);\r\n            throw err;\r\n        }\r\n        this.suiteRunning = false;\r\n        this.emitSuiteEvent('suite-finished');\r\n        return true;\r\n    }\r\n    emitSuiteEvent(ev, eventData = undefined) {\r\n        this.emit(ev, {\r\n            type: ev,\r\n            timestamp: Date.now(),\r\n            suite: this,\r\n            eventData\r\n        });\r\n    }\r\n    emitBenchmarkEvent(ev, ag, at, bench, eventData = undefined) {\r\n        this.emit(ev, {\r\n            type: ev,\r\n            timestamp: Date.now(),\r\n            suite: this,\r\n            associatedGroup: ag,\r\n            associatedTest: at,\r\n            benchmark: bench,\r\n            eventData: eventData\r\n        });\r\n    }\r\n}\r\nexports.PerformanceTestRunner = PerformanceTestRunner;\r\nexports.defaultTestRunner = new PerformanceTestRunner();\r\nexports.measure = exports.defaultTestRunner.measure;\r\nexports.speed = exports.defaultTestRunner.speed;\r\n"},"sourceMaps":{"js":{"mappings":[{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":28,"column":0},"generated":{"line":28,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":29,"column":0},"generated":{"line":29,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":30,"column":0},"generated":{"line":30,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":31,"column":0},"generated":{"line":31,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":32,"column":0},"generated":{"line":32,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":33,"column":0},"generated":{"line":33,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":34,"column":0},"generated":{"line":34,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":35,"column":0},"generated":{"line":35,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":36,"column":0},"generated":{"line":36,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":37,"column":0},"generated":{"line":37,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":38,"column":0},"generated":{"line":38,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":39,"column":0},"generated":{"line":39,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":40,"column":0},"generated":{"line":40,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":41,"column":0},"generated":{"line":41,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":42,"column":0},"generated":{"line":42,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":43,"column":0},"generated":{"line":43,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":44,"column":0},"generated":{"line":44,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":45,"column":0},"generated":{"line":45,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":46,"column":0},"generated":{"line":46,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":47,"column":0},"generated":{"line":47,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":48,"column":0},"generated":{"line":48,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":49,"column":0},"generated":{"line":49,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":50,"column":0},"generated":{"line":50,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":51,"column":0},"generated":{"line":51,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":52,"column":0},"generated":{"line":52,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":53,"column":0},"generated":{"line":53,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":54,"column":0},"generated":{"line":54,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":55,"column":0},"generated":{"line":55,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":56,"column":0},"generated":{"line":56,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":57,"column":0},"generated":{"line":57,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":58,"column":0},"generated":{"line":58,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":59,"column":0},"generated":{"line":59,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":60,"column":0},"generated":{"line":60,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":61,"column":0},"generated":{"line":61,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":62,"column":0},"generated":{"line":62,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":63,"column":0},"generated":{"line":63,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":64,"column":0},"generated":{"line":64,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":65,"column":0},"generated":{"line":65,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":66,"column":0},"generated":{"line":66,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":67,"column":0},"generated":{"line":67,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":68,"column":0},"generated":{"line":68,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":69,"column":0},"generated":{"line":69,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":70,"column":0},"generated":{"line":70,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":71,"column":0},"generated":{"line":71,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":72,"column":0},"generated":{"line":72,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":73,"column":0},"generated":{"line":73,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":74,"column":0},"generated":{"line":74,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":75,"column":0},"generated":{"line":75,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":76,"column":0},"generated":{"line":76,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":77,"column":0},"generated":{"line":77,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":78,"column":0},"generated":{"line":78,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":79,"column":0},"generated":{"line":79,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":80,"column":0},"generated":{"line":80,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":81,"column":0},"generated":{"line":81,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":82,"column":0},"generated":{"line":82,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":83,"column":0},"generated":{"line":83,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":84,"column":0},"generated":{"line":84,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":85,"column":0},"generated":{"line":85,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":86,"column":0},"generated":{"line":86,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":87,"column":0},"generated":{"line":87,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":88,"column":0},"generated":{"line":88,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":89,"column":0},"generated":{"line":89,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":90,"column":0},"generated":{"line":90,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":91,"column":0},"generated":{"line":91,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":92,"column":0},"generated":{"line":92,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":93,"column":0},"generated":{"line":93,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":94,"column":0},"generated":{"line":94,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":95,"column":0},"generated":{"line":95,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":96,"column":0},"generated":{"line":96,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":97,"column":0},"generated":{"line":97,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":98,"column":0},"generated":{"line":98,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":99,"column":0},"generated":{"line":99,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":100,"column":0},"generated":{"line":100,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":101,"column":0},"generated":{"line":101,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":102,"column":0},"generated":{"line":102,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":103,"column":0},"generated":{"line":103,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":104,"column":0},"generated":{"line":104,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":105,"column":0},"generated":{"line":105,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":106,"column":0},"generated":{"line":106,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":107,"column":0},"generated":{"line":107,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":108,"column":0},"generated":{"line":108,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":109,"column":0},"generated":{"line":109,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":110,"column":0},"generated":{"line":110,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":111,"column":0},"generated":{"line":111,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":112,"column":0},"generated":{"line":112,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":113,"column":0},"generated":{"line":113,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":114,"column":0},"generated":{"line":114,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":115,"column":0},"generated":{"line":115,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":116,"column":0},"generated":{"line":116,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":117,"column":0},"generated":{"line":117,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":118,"column":0},"generated":{"line":118,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":119,"column":0},"generated":{"line":119,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":120,"column":0},"generated":{"line":120,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":121,"column":0},"generated":{"line":121,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":122,"column":0},"generated":{"line":122,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":123,"column":0},"generated":{"line":123,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":124,"column":0},"generated":{"line":124,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":125,"column":0},"generated":{"line":125,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":126,"column":0},"generated":{"line":126,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":127,"column":0},"generated":{"line":127,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":128,"column":0},"generated":{"line":128,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":129,"column":0},"generated":{"line":129,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":130,"column":0},"generated":{"line":130,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":131,"column":0},"generated":{"line":131,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":132,"column":0},"generated":{"line":132,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":133,"column":0},"generated":{"line":133,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":134,"column":0},"generated":{"line":134,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":135,"column":0},"generated":{"line":135,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":136,"column":0},"generated":{"line":136,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":137,"column":0},"generated":{"line":137,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":138,"column":0},"generated":{"line":138,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":139,"column":0},"generated":{"line":139,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":140,"column":0},"generated":{"line":140,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":141,"column":0},"generated":{"line":141,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":142,"column":0},"generated":{"line":142,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":143,"column":0},"generated":{"line":143,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":144,"column":0},"generated":{"line":144,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":145,"column":0},"generated":{"line":145,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":146,"column":0},"generated":{"line":146,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":147,"column":0},"generated":{"line":147,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":148,"column":0},"generated":{"line":148,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":149,"column":0},"generated":{"line":149,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":150,"column":0},"generated":{"line":150,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":151,"column":0},"generated":{"line":151,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":152,"column":0},"generated":{"line":152,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":153,"column":0},"generated":{"line":153,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":154,"column":0},"generated":{"line":154,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":155,"column":0},"generated":{"line":155,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":156,"column":0},"generated":{"line":156,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":157,"column":0},"generated":{"line":157,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":158,"column":0},"generated":{"line":158,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":159,"column":0},"generated":{"line":159,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":160,"column":0},"generated":{"line":160,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":161,"column":0},"generated":{"line":161,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":162,"column":0},"generated":{"line":162,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":163,"column":0},"generated":{"line":163,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":164,"column":0},"generated":{"line":164,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":165,"column":0},"generated":{"line":165,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":166,"column":0},"generated":{"line":166,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":167,"column":0},"generated":{"line":167,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":168,"column":0},"generated":{"line":168,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":169,"column":0},"generated":{"line":169,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":170,"column":0},"generated":{"line":170,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":171,"column":0},"generated":{"line":171,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":172,"column":0},"generated":{"line":172,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":173,"column":0},"generated":{"line":173,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":174,"column":0},"generated":{"line":174,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":175,"column":0},"generated":{"line":175,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":176,"column":0},"generated":{"line":176,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":177,"column":0},"generated":{"line":177,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":178,"column":0},"generated":{"line":178,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":179,"column":0},"generated":{"line":179,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":180,"column":0},"generated":{"line":180,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":181,"column":0},"generated":{"line":181,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":182,"column":0},"generated":{"line":182,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":183,"column":0},"generated":{"line":183,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":184,"column":0},"generated":{"line":184,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":185,"column":0},"generated":{"line":185,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":186,"column":0},"generated":{"line":186,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":187,"column":0},"generated":{"line":187,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":188,"column":0},"generated":{"line":188,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":189,"column":0},"generated":{"line":189,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":190,"column":0},"generated":{"line":190,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":191,"column":0},"generated":{"line":191,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":192,"column":0},"generated":{"line":192,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":193,"column":0},"generated":{"line":193,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":194,"column":0},"generated":{"line":194,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":195,"column":0},"generated":{"line":195,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":196,"column":0},"generated":{"line":196,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":197,"column":0},"generated":{"line":197,"column":0}},{"source":"node_modules/performance-test-runner/lib/performance-test-runner.js","original":{"line":198,"column":0},"generated":{"line":198,"column":0}}],"sources":{"node_modules/performance-test-runner/lib/performance-test-runner.js":"\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.speed = exports.measure = exports.defaultTestRunner = exports.PerformanceTestRunner = void 0;\r\nconst events_1 = require(\"events\");\r\nconst Benchmark = require(\"Benchmark\");\r\nconst tree_walker_1 = require(\"./tree-walker\");\r\nconst function_body_helper_1 = require(\"./function-body-helper\");\r\nconst noop = () => {\r\n};\r\nconst orderFunctions = (functions) => {\r\n    if (functions.length < 1)\r\n        throw new Error('at least the test function needs to be defined');\r\n    if (functions.length > 3)\r\n        throw new Error('too many functions given, can only use setup, test and teardown');\r\n    if (functions.length == 1)\r\n        return [noop, functions[0], noop];\r\n    else if (functions.length == 2)\r\n        return [functions[0], functions[1], noop];\r\n    return functions;\r\n};\r\nconst isValidIdentifier = (id) => {\r\n    if (/[ ;\\n]/.test(id))\r\n        return false;\r\n    try {\r\n        return Function('var ' + id + ' = 0; return ' + id + ';')() == 0;\r\n    }\r\n    catch (e) {\r\n        return false;\r\n    }\r\n};\r\nclass PerformanceTestRunner extends events_1.EventEmitter {\r\n    constructor() {\r\n        super();\r\n        this.suiteRunning = false;\r\n        this.callStack = [];\r\n        this.testTree = [];\r\n        // to ensure that the extracted functions keep their context\r\n        this.measure = this.measure.bind(this);\r\n        this.speed = this.speed.bind(this);\r\n    }\r\n    measure(title, fnc) {\r\n        const currentMeasure = {\r\n            type: \"measure\",\r\n            title, containing: []\r\n        };\r\n        if (this.callStack.length == 0)\r\n            this.testTree.push(currentMeasure);\r\n        else {\r\n            this.callStack[this.callStack.length - 1]\r\n                .containing.push(currentMeasure);\r\n        }\r\n        this.callStack.push(currentMeasure);\r\n        fnc();\r\n        this.callStack.pop();\r\n    }\r\n    speed(title, firstFncOrContext, ...functions) {\r\n        let ctx = {};\r\n        if (typeof firstFncOrContext == 'function')\r\n            functions.unshift(firstFncOrContext);\r\n        else\r\n            ctx = firstFncOrContext;\r\n        const [setup, test, teardown] = orderFunctions(functions);\r\n        const currentTest = {\r\n            type: \"speed\",\r\n            title, ctx, setup, test, teardown,\r\n            benchmark: undefined\r\n        };\r\n        this.callStack[this.callStack.length - 1]\r\n            .containing.push(currentTest);\r\n    }\r\n    extractTestResults() {\r\n        return tree_walker_1.mapDepthFirst(this.testTree, (elem) => {\r\n            if (elem.type == 'measure') {\r\n                return { type: 'group', name: elem.title, containing: [] };\r\n            }\r\n            else {\r\n                const bench = elem.benchmark;\r\n                const state = !bench || bench.stats.sample.length == 0 ? 'initialized' :\r\n                    bench.running ? 'running' :\r\n                        'finished';\r\n                if (state == 'initialized') {\r\n                    return {\r\n                        type: 'measurements',\r\n                        name: elem.title, state\r\n                    };\r\n                }\r\n                else {\r\n                    const stats = bench.stats;\r\n                    return {\r\n                        type: 'measurements',\r\n                        name: elem.title, state,\r\n                        hz: bench.hz,\r\n                        rme: stats.rme,\r\n                        samples: stats.sample.length\r\n                    };\r\n                }\r\n            }\r\n        }); // first level of the array will always only contain SPTRGroups\r\n    }\r\n    clearResults() {\r\n        if (this.suiteRunning)\r\n            return false;\r\n        tree_walker_1.depthFirst(this.testTree, (elem, parent) => {\r\n            if (elem.type == 'measure')\r\n                return;\r\n            elem.benchmark = undefined;\r\n        });\r\n        return true;\r\n    }\r\n    async runSuite({ clearPreviousResults = true } = {}) {\r\n        if (this.testTree.length == 0)\r\n            return false;\r\n        if (this.suiteRunning)\r\n            return false;\r\n        if (clearPreviousResults)\r\n            this.clearResults();\r\n        this.suiteRunning = true;\r\n        this.emitSuiteEvent('suite-started');\r\n        try {\r\n            await tree_walker_1.depthFirstAsync(this.testTree, async (elem, parent) => {\r\n                if (elem.type == 'measure')\r\n                    return;\r\n                const { ctx, setup, test: fn, teardown } = elem;\r\n                let bench;\r\n                const benchPromise = new Promise((res, rej) => {\r\n                    const ContextInjectedBench = Benchmark.runInContext(ctx);\r\n                    // derolling the context object from the \"global\" to allow users use attributes of the context without\r\n                    // prepending \"global.\"\r\n                    // Warning: this will not work with transpilers like tsc since they create new identifier in the process\r\n                    const contextUnrolled = Object.keys(ctx)\r\n                        // remove keys which are not valid identifier\r\n                        .filter(isValidIdentifier)\r\n                        .map(k => 'let ' + k + ' = global.' + k + ';').join('\\n') + '\\n';\r\n                    // extracting the body, since it is not clear when the benchmark package compiles the function and when not\r\n                    // this ensures that all tests run in the same manner and ensure that a given context can be used\r\n                    // by the test function\r\n                    const setupBody = function_body_helper_1.extractFunctionBodyString(setup);\r\n                    const fnBody = function_body_helper_1.extractFunctionBodyString(fn);\r\n                    const teardownBody = function_body_helper_1.extractFunctionBodyString(teardown);\r\n                    const onCycle = (ev) => this.emitBenchmarkEvent('benchmark-cycle', parent, elem, bench, ev);\r\n                    bench = new ContextInjectedBench({\r\n                        setup: contextUnrolled + setupBody,\r\n                        fn: fnBody,\r\n                        teardown: teardownBody,\r\n                        async: true,\r\n                        onError: rej,\r\n                        onComplete: res,\r\n                        onCycle\r\n                    });\r\n                });\r\n                elem.benchmark = bench;\r\n                bench.run();\r\n                this.emitBenchmarkEvent('benchmark-started', parent, elem, bench);\r\n                try {\r\n                    await benchPromise;\r\n                }\r\n                catch (err) {\r\n                    this.suiteRunning = false;\r\n                    this.emitBenchmarkEvent('benchmark-error', parent, elem, bench, err);\r\n                    throw err;\r\n                }\r\n                this.emitBenchmarkEvent('benchmark-finished', parent, elem, bench);\r\n            });\r\n        }\r\n        catch (err) {\r\n            this.suiteRunning = false;\r\n            this.emitSuiteEvent('suite-error', err);\r\n            throw err;\r\n        }\r\n        this.suiteRunning = false;\r\n        this.emitSuiteEvent('suite-finished');\r\n        return true;\r\n    }\r\n    emitSuiteEvent(ev, eventData = undefined) {\r\n        this.emit(ev, {\r\n            type: ev,\r\n            timestamp: Date.now(),\r\n            suite: this,\r\n            eventData\r\n        });\r\n    }\r\n    emitBenchmarkEvent(ev, ag, at, bench, eventData = undefined) {\r\n        this.emit(ev, {\r\n            type: ev,\r\n            timestamp: Date.now(),\r\n            suite: this,\r\n            associatedGroup: ag,\r\n            associatedTest: at,\r\n            benchmark: bench,\r\n            eventData: eventData\r\n        });\r\n    }\r\n}\r\nexports.PerformanceTestRunner = PerformanceTestRunner;\r\nexports.defaultTestRunner = new PerformanceTestRunner();\r\nexports.measure = exports.defaultTestRunner.measure;\r\nexports.speed = exports.defaultTestRunner.speed;\r\n"},"lineCount":198}},"error":null,"hash":"bca8c4cb644a9aaec385358a78187460","cacheData":{"env":{}}}